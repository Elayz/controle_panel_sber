var WsMessageType,__decorate=this&&this.__decorate||function(e,s,t,n){var o,i=arguments.length,r=i<3?s:null===n?n=Object.getOwnPropertyDescriptor(s,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,s,t,n);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(r=(i<3?o(r):i>3?o(s,t,r):o(s,t))||r);return i>3&&r&&Object.defineProperty(s,t,r),r};!function(e){e[e.PONG=0]="PONG",e[e.JsonRpcResponse=1]="JsonRpcResponse",e[e.JsonRpcSubscriptionResponse=2]="JsonRpcSubscriptionResponse",e[e.UNDEFINED=3]="UNDEFINED"}(WsMessageType||(WsMessageType={}));export class JsonRpcWS extends EventTarget{constructor(e,s){super(),this._socket=null,this._url=e,this._pingInterval=null,this._requestId=1,this._subscriptionId=1,this._requestPromises={},this._subscriptions={},this._disconnected=!1,this._inactivity_timeout=s,this._reconnectionAttempt=0,this._reconnectionBaseDelayMs=1e3,this.addEventListener("JsonRpcWS_ClearSubscriptionsEvent",(()=>{console.log("[JsonRpcWS]->receive event {JsonRpcWS_ClearSubscriptionsEvent}");for(const e in this._subscriptions)delete this._subscriptions[e]})),this.addEventListener("JsonRpcWS_ReSubSubscriptionsEvent",(async()=>{console.log("[JsonRpcWS]->receive event {JsonRpcWS_ReSubSubscriptionsEvent}"),await this.restoreSubscriptions()}))}get url(){return this._url}get isConnected(){return this._socket?.readyState===WebSocket.OPEN||!1}get isClosed(){return this._socket?.readyState===WebSocket.CLOSED||!0}get subscriptionId(){return this._subscriptionId++}async connect(){return new Promise(((e,s)=>{this._socket=new WebSocket(this._url),this._socket.onopen=async()=>{e({status:"connected"}),console.log("connected"),this._reconnectionAttempt=0,this._disconnected?(console.log("[JsonRpcWS]->dispatchEvent {JsonRpcWS_AuthRequiredEvent}"),this.dispatchEvent(new Event("JsonRpcWS_AuthRequiredEvent")),console.log("[JsonRpcWS]->dispatchEvent {JsonRpcWS_ReConnectedEvent}"),this.dispatchEvent(new Event("JsonRpcWS_ReConnectedEvent")),this._disconnected=!1):(console.log("[JsonRpcWS]->dispatchEvent {JsonRpcWS_ConnectedEvent}"),this.dispatchEvent(new Event("JsonRpcWS_ConnectedEvent"))),this.ping()},this._socket.onclose=async e=>{if(console.log(`disconnected: ${e.code} ${e.reason} ${e.wasClean}`),console.log("[JsonRpcWS]->dispatchEvent {JsonRpcWS_DisconnectedEvent}"),this.dispatchEvent(new Event("JsonRpcWS_DisconnectedEvent")),this._pingInterval){clearInterval(this._pingInterval),this._pingInterval=null;for(const e in this._requestPromises)delete this._requestPromises[e]}this._disconnected=!0,this._requestId=1,this._subscriptionId=1,this._reconnectionAttempt++;let s=this._reconnectionBaseDelayMs*2**this._reconnectionAttempt;this._reconnectionAttempt>=5&&(this._reconnectionAttempt=0,s=this._reconnectionBaseDelayMs*2**this._reconnectionAttempt,console.log("[JsonRpcWS]->dispatchEvent {JsonRpcWS_ConnectionTimeoutEvent}"),this.dispatchEvent(new Event("JsonRpcWS_ConnectionTimeoutEvent"))),console.log(`Retry attempt ${this._reconnectionAttempt} after ${s}ms`),setTimeout((async()=>{console.log("Trying to reconnect..."),await this.connect()}),s)},this._socket.onerror=e=>{this._socket?.close()},this._socket.onmessage=e=>{let s,t=WsMessageType.UNDEFINED;if("string"==typeof e.data)try{s=JSON.parse(e.data),this.isJsonRpcSubscriptionResponse(s)&&(t=WsMessageType.JsonRpcSubscriptionResponse),this.isJsonRpcResponse(s)&&(t=WsMessageType.JsonRpcResponse)}catch(n){s=e.data,"PONG"===s&&(t=WsMessageType.PONG)}switch(t){case WsMessageType.PONG:console.log("[↓] PONG");break;case WsMessageType.JsonRpcResponse:this._requestPromises[s.id].resolve(s),delete this._requestPromises[s.id];break;case WsMessageType.JsonRpcSubscriptionResponse:if(s.params.data&&s.params.id in this._subscriptions){let e=s.params.data.time;for(let t=0;t<s.params.data.changes.length;t++){let n=s.params.data.changes[t];e+=n[1],n[1]=e,4e3===n[3]?(n[1]=0,n[3]=void 0):0===n[3]&&(n[3]=void 0)}this._subscriptions[s.params.id].handler(s.params.data.changes)}break;case WsMessageType.UNDEFINED:console.log("[↓] WsMessageType.UNDEFINED: "),console.log(s)}}}))}sendRequest(e,s){const t=this._requestId++;let n={jsonrpc:"2.0",id:t,method:e};return s&&(n.params=s),new Promise(((e,s)=>{this._requestPromises[t]={resolve:e,reject:s},this._socket&&this.isConnected?this._socket.send(JSON.stringify(n)):s("JSON_RPC_PULT.socket is null")}))}subscribe(e,s,t,n){const o=this._requestId++;let i={jsonrpc:"2.0",id:o,method:"subscribe",params:{event:s,id:e,options:t}};return this._subscriptions[e]={event:s,handler:n,id:e,options:t},console.log("in subscribe"),console.log(this._subscriptions),new Promise(((s,t)=>{this._requestPromises[o]={resolve:s,reject:t},this._socket&&this.isConnected?this._socket.send(JSON.stringify(i)):(delete this._subscriptions[e],t("JsonRpcWS is closed"))}))}deleteSubscription(e){console.log(this._subscriptions),e in this._subscriptions&&delete this._subscriptions[e],console.log(this._subscriptions)}unsubscribe(e,s){const t=this._requestId++;let n={jsonrpc:"2.0",id:t,method:"unsubscribe",params:{event:s,id:e}};return new Promise(((e,s)=>{this._requestPromises[t]={resolve:e,reject:s},this._socket&&this.isConnected?this._socket.send(JSON.stringify(n)):s("JsonRpcWS is closed")}))}async restoreSubscriptions(){for(const e in this._subscriptions){(await this.subscribe(this._subscriptions[e].id,this._subscriptions[e].event,this._subscriptions[e].options,this._subscriptions[e].handler)).error?console.log(`Error during resubscribing for ${this._subscriptions[e].id}`):console.log(`Resubscribed for ${this._subscriptions[e].id}`)}}isJsonRpcSubscriptionResponse(e){return"method"in e&&"subscription"===e.method}isJsonRpcResponse(e){return"jsonrpc"in e&&"2.0"===e.jsonrpc&&"id"in e&&("result"in e||"error"in e)}ping(){this._pingInterval||(this._pingInterval=setInterval((()=>{this._socket&&this.isConnected&&(console.log("[↑] PING"),this._socket.send("PING"))}),this._inactivity_timeout/2))}}function authRequiredDecorator(e,s,t){const n=t.value;return t.value=async function(...e){if(!this.isAuthed)throw new AuthRequiredError("Authentication required");return await n.apply(this,e)},t}export default class JsonRpcService{constructor(e,s){this._user={},this._jsonRpcWS=new JsonRpcWS(e,s),this._jsonRpcWS.addEventListener("JsonRpcWS_AuthRequiredEvent",(async()=>{console.log("[JsonRpcService]->receive event {JsonRpcWS_AuthRequiredEvent}"),await this.hardVerifyToken()}))}on(e,s){console.log(`[JsonRpcService]->set event handler ${e}`),this._jsonRpcWS.addEventListener(e,s)}removeEventListener(e,s){console.log(`[JsonRpcService]->rm event handler ${e}`),this._jsonRpcWS.removeEventListener(e,s)}onConnected(e){this._jsonRpcWS.addEventListener("JsonRpcWS_ConnectedEvent",e)}removeConnectedEventListener(e){this._jsonRpcWS.removeEventListener("JsonRpcWS_ConnectedEvent",e)}onDisconnect(e){this._jsonRpcWS.addEventListener("JsonRpcWS_DisconnectedEvent",e)}removeDisconnectEventListener(e){this._jsonRpcWS.removeEventListener("JsonRpcWS_DisconnectedEvent",e)}onReConnected(e){this._jsonRpcWS.addEventListener("JsonRpcWS_ReConnectedEvent",e)}removeReConnectedEventListener(e){this._jsonRpcWS.removeEventListener("JsonRpcWS_ReConnectedEvent",e)}onTokinNotValid(e){this._jsonRpcWS.addEventListener("JsonRpcWS_TokinNotValidEvent",e)}removeTokinNotValidEventListener(e){this._jsonRpcWS.removeEventListener("JsonRpcWS_TokinNotValidEvent",e)}onConnectionTimeout(e){this._jsonRpcWS.addEventListener("JsonRpcWS_ConnectionTimeoutEvent",e)}removeConnectionEventListener(e){this._jsonRpcWS.removeEventListener("JsonRpcWS_ConnectionTimeoutEvent",e)}get url(){return this._jsonRpcWS.url}get isConnected(){return this._jsonRpcWS.isConnected}get isClosed(){return this._jsonRpcWS.isClosed}get isAuthed(){return this._user.isAuthed}get login(){return this._user.login}async connectWS(){return await this._jsonRpcWS.connect()}async loginUser(e){const s=this;return new Promise((async function(t,n){try{const n=await s._jsonRpcWS.sendRequest("user_login",{...e,remember:!0});n.error?s.resetUser():(s._user.login=e.login,s._user.token=n.result,s._user.isAuthed=!1),t(n)}catch(e){n(e)}}))}async verifyTokenUser(e){const s=this;return new Promise((async function(t,n){try{const o=await s._jsonRpcWS.sendRequest("user_tokin",e);o.error?n(o.error.message):(s._user.isAuthed||(s._user.isAuthed=!0),s._user.login||(s._user.login=e.login),s._user.token||(s._user.token=e.token),t(o))}catch(e){n(e)}}))}async getMe(){return await this._jsonRpcWS.sendRequest("user_get",{})}async logout(){const e=this;return new Promise((async function(s,t){try{const n=await e._jsonRpcWS.sendRequest("user_logout",{login:e._user.login,token:e._user.token});n.error?t(n.error?.message):(e.resetUser(),s(n))}catch(e){t(e)}}))}async getNotifications(){return await this._jsonRpcWS.sendRequest("user_notifications",{})}async fdbList(e,s=!1){return await this._jsonRpcWS.sendRequest("fdb_list",{path:e,recursive:s})}async subscribeVars(e,s){const t=this;return new Promise((async function(n,o){try{const o=t._jsonRpcWS.subscriptionId;let i=await t._jsonRpcWS.subscribe(o,"vars",e,s);"object"==typeof i&&!Array.isArray(i)&&null!==i&&"result"in i&&("object"!=typeof i.result||Array.isArray(i.result)||null===i.result||(i.result={...i.result,subscriptionId:o,unsubscribe:async()=>{const e=t._jsonRpcWS;return new Promise((async function(s,t){try{const t=await e.unsubscribe(o,"vars");"object"==typeof t&&!Array.isArray(t)&&null!==t&&"result"in t&&(e.deleteSubscription(o),s(t))}catch(e){console.log(e),t(e)}}))}})),n(i)}catch(e){o(e)}}))}async loadProjectVars(e){const s=this;return new Promise((async function(t,n){try{const o=await s._jsonRpcWS.sendRequest("var_list",{path:`/data/projects/${e}`});if(o.error)n(o.error.message);else{const e=[...new Set(o.result.rows.map((e=>e[2])))],i=await s._jsonRpcWS.sendRequest("node_list",{indexes:e});if(i.error)n(i.error.message);else{const e={},n=[];i.result.forEach((t=>{e[t.index]={path:"",prefix:""},e[t.index].path=s.pseudoPath(t.path),e[t.index].prefix=t.prefix})),o.result.rows.forEach((s=>{n.push({name:s[0],systemName:`${e[s[2]].prefix}_${s[0]}`,index:s[1],nodeid:s[2],nodeTitle:e[s[2]].path,trend:s[3],physical:s[4],round:s[5],description:s[6],tags:s[7],unit:s[8],comment:s[9]})})),t({...o,result:n})}}}catch(e){n(e)}}))}async setVar(e){const s=this;return new Promise((async function(t,n){try{const o=await s._jsonRpcWS.sendRequest("var_set",e);o.error?n(o.error?.message):t(o)}catch(e){n(e)}}))}async hardVerifyToken(){const e=this;return new Promise((async function(s,t){try{const t=await e._jsonRpcWS.sendRequest("user_tokin",{login:e._user.login,token:e._user.token,browser:""});t.error?(e.resetUser(),console.log("[JsonRpcService]->dispatchEvent {JsonRpcWS_ClearSubscriptionsEvent}"),e._jsonRpcWS.dispatchEvent(new Event("JsonRpcWS_ClearSubscriptionsEvent"))):(console.log("[JsonRpcService]->dispatchEvent {JsonRpcWS_ReSubSubscriptionsEvent}"),e._jsonRpcWS.dispatchEvent(new Event("JsonRpcWS_ReSubSubscriptionsEvent"))),s(t)}catch(e){t(e)}}))}resetUser(){this._user.login="",this._user.token="",this._user.isAuthed=!1}pseudoPath(e,s,t=0){if(!e)return;let n=["project","mimic","node","group","gateway","trendset","prototype","screen"],o={projects:"Проекты",build:"Сборка",mimics:"Мнемосхемы",nodes:"Узлы",screens:"Экраны",gateways:"Шлюзы",groups:"Группы",backups:"Резервные копии",prototypes:"Прототипы",trends:"Тренды",resources:"Ресурсы",alarms:"Аварии",vars:"Переменные",journal:"Журнал"},i=[];0===e.indexOf("/data/projects/")&&(e=e.substr(15));let r,c=e.split("/");for(let e=0;e<c.length;e++){let s,a,p=c[e],u=p.lastIndexOf(".");u>=0?(s=p.substr(0,u),a=p.substr(u+1)):(s=p,a=""),"project"===r&&(s=o[s]||s),r=a,n.indexOf(a)>=0&&(a="");let d=s+(a?"."+a:"");e>=t&&i.push(d)}return s&&(i[i.length-1]=s),i.join(" / ")}}__decorate([authRequiredDecorator],JsonRpcService.prototype,"getMe",null),__decorate([authRequiredDecorator],JsonRpcService.prototype,"logout",null),__decorate([authRequiredDecorator],JsonRpcService.prototype,"getNotifications",null),__decorate([authRequiredDecorator],JsonRpcService.prototype,"fdbList",null),__decorate([authRequiredDecorator],JsonRpcService.prototype,"subscribeVars",null),__decorate([authRequiredDecorator],JsonRpcService.prototype,"loadProjectVars",null),__decorate([authRequiredDecorator],JsonRpcService.prototype,"setVar",null);export class AuthRequiredError extends Error{constructor(e){super(e),this.name="AuthRequiredError"}}
